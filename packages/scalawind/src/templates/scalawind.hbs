package {{package}}

import scala.quoted.*
import scala.annotation.unused

case class TwStyle(style: String = "") {
  def addClasses(@unused classNames: String): TwStyle = TwStyle()
  def addClass(@unused className: String): TwStyle = TwStyle()

  {{#each modifiers}}
  def {{this.name}}(@unused styles: TwStyle): TwStyle = TwStyle()
  {{/each}}
  def important(@unused styles: TwStyle): TwStyle = TwStyle()
  def i(@unused styles: TwStyle): TwStyle = TwStyle()

  override def toString: String = style
}

object tw {
  def apply(): TwStyle = TwStyle()

  {{#each standard}}
  def {{this.prop}}: TwStyle = TwStyle()
  {{/each}}

  {{#each modifiers}}
  def {{this.name}}(@unused styles: TwStyle): TwStyle = TwStyle()
  {{/each}}
  def important(@unused styles: TwStyle): TwStyle = TwStyle()
  def i(@unused styles: TwStyle): TwStyle = TwStyle()
}

extension (twStyle: TwStyle)
  {{#each standard}}
  def {{this.prop}}: TwStyle = TwStyle()
  {{/each}}

inline implicit def sw(inline twStyle: TwStyle): String =
  ${ swImpl('twStyle) }


def swImpl(twStyleExpr: Expr[TwStyle])(using Quotes): Expr[String] = {
  import quotes.reflect.*

  def extractClassNames(term: Term): List[String] = term match {
    {{#each modifiers}}
    case Apply(Select(inner, "{{this.name}}"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"{{this.value}}:$clx")
      extractClassNames(inner) ++ classes
    {{/each}}
    case Apply(Select(inner, "important"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"!$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "i"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"!$clx")
      extractClassNames(inner) ++ classes
    case Apply(Ident(name), List(inner)) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Inlined(_, _, inner) =>
      extractClassNames(inner)
    case Select(inner, name) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Ident("twStyle") =>
      Nil
    case Ident("tw") =>
      Nil
    case _ =>
      report.errorAndAbort(s"Unexpected term: $term")
  }

  val term = twStyleExpr.asTerm
  val classNames = extractClassNames(term)
  val combinedClasses = classNames.mkString(" ")
  report.info(s"Compiled: $combinedClasses")
  Expr(combinedClasses)
}
