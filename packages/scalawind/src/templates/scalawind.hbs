package {{package}}

import scala.quoted.*

object clx {
  {{#each standard}}
  val {{this.prop}} = "{{this.raw}}"
  {{/each}}
}

case class TwStyle(style: String = "") {
  def addClasses(classNames: String): TwStyle = {
    val newStyle = s"$style ${classNames}".trim
    TwStyle(newStyle)
  }
  def addClass(className: String): TwStyle = addClasses(className)

  {{#each modifiers}}
  def {{this}}(styles: TwStyle): TwStyle = {
    val classes = styles.style.split("\\s+").map(clx => s"{{this}}:$clx").mkString(" ")
    addClasses(classes)
  }
  {{/each}}

  override def toString: String = style
}

object tw {
  def apply(): SwStyle = SwStyle()

  {{#each standard}}
  def {{this.prop}}: TwStyle = TwStyle().addClass(clx.{{this.prop}})
  {{/each}}

  {{#each modifiers}}
  def {{this}}(styles: TwStyle): TwStyle = TwStyle().{{this}}(styles)
  {{/each}}
}

extension (twStyle: TwStyle)
  {{#each standard}}
  def {{this.prop}}: TwStyle = twStyle.addClass(clx.{{this.prop}})
  {{/each}}

inline implicit def sw(inline twStyle: TwStyle): String =
  ${ swImpl('twStyle) }


def swImpl(twStyleExpr: Expr[TwStyle])(using Quotes): Expr[String] = {
  import quotes.reflect.*

  def extractClassNames(term: Term): List[String] = term match {
    {{#each modifiers}}
    case Apply(Select(inner, "{{this}}"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"{{this}}:$clx")
      extractClassNames(inner) ++ classes
    {{/each}}
    case Apply(Select(inner, "md"), List(mdStyle)) =>
      val mdClasses = extractClassNames(mdStyle).map(cls => s"md:$cls")
      extractClassNames(inner) ++ mdClasses
    case Apply(Ident(name), List(inner)) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Inlined(_, _, inner) =>
      extractClassNames(inner)
    case Select(inner, name) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Ident("twStyle") =>
      Nil
    case Ident("tw") =>
      Nil
    case _ =>
      report.errorAndAbort(s"Unexpected term: $term")
  }

  val term = twStyleExpr.asTerm
  val classNames = extractClassNames(term)
  val combinedClasses = classNames.mkString(" ")
  report.info(s"Compiled classes: $combinedClasses")
  Expr(combinedClasses)
}
