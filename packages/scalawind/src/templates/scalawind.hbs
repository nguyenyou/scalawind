package {{package}}

import scala.quoted.*

object cls {
  val flex = "flex"
  val bg_black = "bg-black"
  val bg_white = "bg-white"
  val text_white = "text-white"
  val text_black = "text-black"
}

case class SwStyle(style: String = "") {
  def addClasses(classNames: String): SwStyle = {
    val newStyle = s"$style ${classNames}".trim
    SwStyle(newStyle)
  }
  def addClass(className: String): SwStyle = addClasses(className)

  {{#each modifiers}}
  def {{this}}(styles: SwStyle): SwStyle = {
    val classes = styles.style.split("\\s+").map(cls => s"{{this}}:$cls").mkString(" ")
    addClasses(classes)
  }
  {{/each}}

  override def toString: String = style
}

given Conversion[SwStyle, String] with
  def apply(swStyle: SwStyle): String = swStyle.style

extension (swStyle: SwStyle)
  def flex: SwStyle = swStyle.addClass(cls.flex)
  def bg_black: SwStyle = swStyle.addClass(cls.bg_black)
  def bg_white: SwStyle = swStyle.addClass(cls.bg_white)
  def text_white: SwStyle = swStyle.addClass(cls.text_white)
  def text_black: SwStyle = swStyle.addClass(cls.text_black)

object tw {
  def apply(): SwStyle = SwStyle()

  def flex: SwStyle = SwStyle().addClass(cls.flex)
  def bg_black: SwStyle = SwStyle().addClass(cls.bg_black)
  def bg_white: SwStyle = SwStyle().addClass(cls.bg_white)
  def text_white: SwStyle = SwStyle().addClass(cls.text_white)
  def text_black: SwStyle = SwStyle().addClass(cls.text_black)

  {{#each modifiers}}
  def {{this}}(styles: SwStyle): SwStyle = SwStyle().{{this}}(styles)
  {{/each}}
}

inline def sw(inline styles: SwStyle): String =
  ${ swImpl('styles) }

private def swImpl(stylesExpr: Expr[SwStyle])(using Quotes): Expr[String] = {
  import quotes.reflect.*

  def extractClassNames(term: Term): List[String] = term match {
    {{#each modifiers}}
    case Apply(Select(inner, "{{this}}"), List(styles)) =>
      val classes = extractClassNames(styles).map(cls => s"{{this}}:$cls")
      extractClassNames(inner) ++ classes
    {{/each}}
    case Apply(Ident(name), List(inner)) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Inlined(_, _, inner) =>
      extractClassNames(inner)
    case Select(inner, name) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Ident("tw") =>
      Nil
    case _ =>
      report.errorAndAbort(s"Unexpected term: $term")
  }

  val term = stylesExpr.asTerm
  val classNames = extractClassNames(term)
  val combinedClasses = classNames.mkString(" ")
  report.info(s"Compiled: $combinedClasses")
  Expr(combinedClasses)
}
