package {{package}}

import scala.quoted.*
import scala.annotation.unused

case class Tailwind() {
  {{#each modifiers}}
  def {{this.name}}(@unused styles: Tailwind): Tailwind = Tailwind()
  {{/each}}
  def important(@unused styles: Tailwind): Tailwind = Tailwind()
  def i(@unused styles: Tailwind): Tailwind = Tailwind()
  def raw(@unused classString: String): Tailwind = Tailwind()
}

object tw {
  def apply(): Tailwind = Tailwind()

  {{#each standard}}
  {{this.doc}}
  def {{this.prop}}: Tailwind = Tailwind()
  {{/each}}

  {{#each modifiers}}
  def {{this.name}}(@unused styles: Tailwind): Tailwind = Tailwind()
  {{/each}}
  def important(@unused styles: Tailwind): Tailwind = Tailwind()
  def i(@unused styles: Tailwind): Tailwind = Tailwind()
  def raw(@unused classString: String): Tailwind = Tailwind()
}

extension (tailwind: Tailwind)
  {{#each standard}}
  {{this.doc}}
  def {{this.prop}}: Tailwind = Tailwind()
  {{/each}}

inline def sw(inline tailwind: Tailwind): String =
  ${ swImpl('tailwind) }

def swImpl(twStyleExpr: Expr[Tailwind])(using Quotes): Expr[String] = {
  import quotes.reflect.*

  def extractClassNames(term: Term): List[String] = term match {
    {{#each modifiers}}
    case Apply(Select(inner, "{{this.name}}"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"{{this.value}}:$clx")
      extractClassNames(inner) ++ classes
    {{/each}}
    case Apply(Select(Select(Ident("tw"), method), "raw"), List(Literal(StringConstant(classString)))) =>
      val methodClass = method.replace("_", "-")
      val rawClasses = classString.split("\\s+").toList
      methodClass :: rawClasses
    case Apply(Select(Ident("tw"), "raw"), List(Literal(StringConstant(classString)))) =>
      classString.split("\\s+").toList
    case Apply(Select(inner, "important"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"!$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "i"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"!$clx")
      extractClassNames(inner) ++ classes
    case Apply(Ident(name), List(inner)) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Inlined(_, _, inner) =>
      extractClassNames(inner)
    case Select(inner, name) =>
      extractClassNames(inner) :+ name.replace("_", "-")
    case Ident("tailwind") =>
      Nil
    case Ident("tw") =>
      Nil
    case _ =>
      report.errorAndAbort(s"Unexpected term: $term")
  }

  val term = twStyleExpr.asTerm
  val classNames = extractClassNames(term)
  val combinedClasses = classNames.mkString(" ")
  {{#if previewCompliedResult}}
  report.info(combinedClasses)
  {{/if}}
  Expr(combinedClasses)
}
