package scalawind

import scala.quoted.*
import scala.annotation.unused

case class Tailwind() {
  def first_letter(@unused styles: Tailwind): Tailwind = Tailwind()
  def first_line(@unused styles: Tailwind): Tailwind = Tailwind()
  def marker(@unused styles: Tailwind): Tailwind = Tailwind()
  def selection(@unused styles: Tailwind): Tailwind = Tailwind()
  def file(@unused styles: Tailwind): Tailwind = Tailwind()
  def placeholder(@unused styles: Tailwind): Tailwind = Tailwind()
  def backdrop(@unused styles: Tailwind): Tailwind = Tailwind()
  def before(@unused styles: Tailwind): Tailwind = Tailwind()
  def after(@unused styles: Tailwind): Tailwind = Tailwind()
  def first(@unused styles: Tailwind): Tailwind = Tailwind()
  def last(@unused styles: Tailwind): Tailwind = Tailwind()
  def only(@unused styles: Tailwind): Tailwind = Tailwind()
  def odd(@unused styles: Tailwind): Tailwind = Tailwind()
  def even(@unused styles: Tailwind): Tailwind = Tailwind()
  def first_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def last_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def only_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def visited(@unused styles: Tailwind): Tailwind = Tailwind()
  def target(@unused styles: Tailwind): Tailwind = Tailwind()
  def open(@unused styles: Tailwind): Tailwind = Tailwind()
  def default(@unused styles: Tailwind): Tailwind = Tailwind()
  def checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def indeterminate(@unused styles: Tailwind): Tailwind = Tailwind()
  def placeholder_shown(@unused styles: Tailwind): Tailwind = Tailwind()
  def autofill(@unused styles: Tailwind): Tailwind = Tailwind()
  def optional(@unused styles: Tailwind): Tailwind = Tailwind()
  def required(@unused styles: Tailwind): Tailwind = Tailwind()
  def valid(@unused styles: Tailwind): Tailwind = Tailwind()
  def invalid(@unused styles: Tailwind): Tailwind = Tailwind()
  def in_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def out_of_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def read_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def empty(@unused styles: Tailwind): Tailwind = Tailwind()
  def focus_within(@unused styles: Tailwind): Tailwind = Tailwind()
  def hover(@unused styles: Tailwind): Tailwind = Tailwind()
  def focus(@unused styles: Tailwind): Tailwind = Tailwind()
  def focus_visible(@unused styles: Tailwind): Tailwind = Tailwind()
  def active(@unused styles: Tailwind): Tailwind = Tailwind()
  def enabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_first(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_last(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_odd(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_even(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_first_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_last_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_only_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_visited(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_target(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_open(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_default(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_indeterminate(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_placeholder_shown(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_autofill(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_optional(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_valid(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_invalid(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_in_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_out_of_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_read_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_empty(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_focus_within(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_hover(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_focus(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_focus_visible(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_active(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_enabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_first(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_last(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_odd(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_even(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_first_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_last_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_only_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_visited(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_target(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_open(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_default(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_indeterminate(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_placeholder_shown(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_autofill(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_optional(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_valid(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_invalid(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_in_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_out_of_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_read_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_empty(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_focus_within(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_hover(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_focus(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_focus_visible(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_active(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_enabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer(@unused styles: Tailwind): Tailwind = Tailwind()
  def has(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_has(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_has(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_busy(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_expanded(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_hidden(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_pressed(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_readonly(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_selected(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_busy(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_expanded(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_hidden(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_pressed(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_readonly(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_selected(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_busy(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_expanded(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_hidden(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_pressed(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_readonly(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_selected(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria(@unused styles: Tailwind): Tailwind = Tailwind()
  def data(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_data(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_data(@unused styles: Tailwind): Tailwind = Tailwind()
  def supports(@unused styles: Tailwind): Tailwind = Tailwind()
  def motion_safe(@unused styles: Tailwind): Tailwind = Tailwind()
  def motion_reduce(@unused styles: Tailwind): Tailwind = Tailwind()
  def contrast_more(@unused styles: Tailwind): Tailwind = Tailwind()
  def contrast_less(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_sm(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_md(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_lg(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_2xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def max(@unused styles: Tailwind): Tailwind = Tailwind()
  def sm(@unused styles: Tailwind): Tailwind = Tailwind()
  def md(@unused styles: Tailwind): Tailwind = Tailwind()
  def lg(@unused styles: Tailwind): Tailwind = Tailwind()
  def xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def _2xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def min(@unused styles: Tailwind): Tailwind = Tailwind()
  def portrait(@unused styles: Tailwind): Tailwind = Tailwind()
  def landscape(@unused styles: Tailwind): Tailwind = Tailwind()
  def ltr(@unused styles: Tailwind): Tailwind = Tailwind()
  def rtl(@unused styles: Tailwind): Tailwind = Tailwind()
  def dark(@unused styles: Tailwind): Tailwind = Tailwind()
  def forced_colors(@unused styles: Tailwind): Tailwind = Tailwind()
  def print(@unused styles: Tailwind): Tailwind = Tailwind()
  def important(@unused styles: Tailwind): Tailwind = Tailwind()
  def i(@unused styles: Tailwind): Tailwind = Tailwind()
  def raw(@unused classString: String): Tailwind = Tailwind()
  def opacity(value: Int): Tailwind = Tailwind()
  def o(value: Int): Tailwind = Tailwind()
  def variant(selector: String, styles: Tailwind): Tailwind = Tailwind()
}

object tw {
  def apply(): Tailwind = Tailwind()

  /** {{{
    * .w-0 {
    *   width: 0;
    * }
    * }}}
    */
  def w_0: Tailwind = Tailwind()
  /** {{{
    * .w-1 {
    *   width: .25rem;
    * }
    * }}}
    */
  def w_1: Tailwind = Tailwind()
  /** {{{
    * .w-2 {
    *   width: .5rem;
    * }
    * }}}
    */
  def w_2: Tailwind = Tailwind()
  /** {{{
    * .w-3 {
    *   width: .75rem;
    * }
    * }}}
    */
  def w_3: Tailwind = Tailwind()
  /** {{{
    * .w-4 {
    *   width: 1rem;
    * }
    * }}}
    */
  def w_4: Tailwind = Tailwind()
  /** {{{
    * .w-5 {
    *   width: 1.25rem;
    * }
    * }}}
    */
  def w_5: Tailwind = Tailwind()
  /** {{{
    * .w-6 {
    *   width: 1.5rem;
    * }
    * }}}
    */
  def w_6: Tailwind = Tailwind()
  /** {{{
    * .w-7 {
    *   width: 1.75rem;
    * }
    * }}}
    */
  def w_7: Tailwind = Tailwind()
  /** {{{
    * .w-8 {
    *   width: 2rem;
    * }
    * }}}
    */
  def w_8: Tailwind = Tailwind()
  /** {{{
    * .w-9 {
    *   width: 2.25rem;
    * }
    * }}}
    */
  def w_9: Tailwind = Tailwind()
  /** {{{
    * .w-10 {
    *   width: 2.5rem;
    * }
    * }}}
    */
  def w_10: Tailwind = Tailwind()
  /** {{{
    * .w-11 {
    *   width: 2.75rem;
    * }
    * }}}
    */
  def w_11: Tailwind = Tailwind()
  /** {{{
    * .w-12 {
    *   width: 3rem;
    * }
    * }}}
    */
  def w_12: Tailwind = Tailwind()
  /** {{{
    * .w-14 {
    *   width: 3.5rem;
    * }
    * }}}
    */
  def w_14: Tailwind = Tailwind()
  /** {{{
    * .w-16 {
    *   width: 4rem;
    * }
    * }}}
    */
  def w_16: Tailwind = Tailwind()
  /** {{{
    * .w-20 {
    *   width: 5rem;
    * }
    * }}}
    */
  def w_20: Tailwind = Tailwind()
  /** {{{
    * .w-24 {
    *   width: 6rem;
    * }
    * }}}
    */
  def w_24: Tailwind = Tailwind()
  /** {{{
    * .w-28 {
    *   width: 7rem;
    * }
    * }}}
    */
  def w_28: Tailwind = Tailwind()
  /** {{{
    * .w-32 {
    *   width: 8rem;
    * }
    * }}}
    */
  def w_32: Tailwind = Tailwind()
  /** {{{
    * .w-36 {
    *   width: 9rem;
    * }
    * }}}
    */
  def w_36: Tailwind = Tailwind()
  /** {{{
    * .w-40 {
    *   width: 10rem;
    * }
    * }}}
    */
  def w_40: Tailwind = Tailwind()
  /** {{{
    * .w-44 {
    *   width: 11rem;
    * }
    * }}}
    */
  def w_44: Tailwind = Tailwind()
  /** {{{
    * .w-48 {
    *   width: 12rem;
    * }
    * }}}
    */
  def w_48: Tailwind = Tailwind()
  /** {{{
    * .w-52 {
    *   width: 13rem;
    * }
    * }}}
    */
  def w_52: Tailwind = Tailwind()
  /** {{{
    * .w-56 {
    *   width: 14rem;
    * }
    * }}}
    */
  def w_56: Tailwind = Tailwind()
  /** {{{
    * .w-60 {
    *   width: 15rem;
    * }
    * }}}
    */
  def w_60: Tailwind = Tailwind()
  /** {{{
    * .w-64 {
    *   width: 16rem;
    * }
    * }}}
    */
  def w_64: Tailwind = Tailwind()
  /** {{{
    * .w-72 {
    *   width: 18rem;
    * }
    * }}}
    */
  def w_72: Tailwind = Tailwind()
  /** {{{
    * .w-80 {
    *   width: 20rem;
    * }
    * }}}
    */
  def w_80: Tailwind = Tailwind()
  /** {{{
    * .w-96 {
    *   width: 24rem;
    * }
    * }}}
    */
  def w_96: Tailwind = Tailwind()
  /** {{{
    * .w-auto {
    *   width: auto;
    * }
    * }}}
    */
  def w_auto: Tailwind = Tailwind()
  /** {{{
    * .w-px {
    *   width: 1px;
    * }
    * }}}
    */
  def w_px: Tailwind = Tailwind()
  /** {{{
    * .w-1/2 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_1$2: Tailwind = Tailwind()
  /** {{{
    * .w-1/3 {
    *   width: 33.3333%;
    * }
    * }}}
    */
  def w_1$3: Tailwind = Tailwind()
  /** {{{
    * .w-2/3 {
    *   width: 66.6667%;
    * }
    * }}}
    */
  def w_2$3: Tailwind = Tailwind()
  /** {{{
    * .w-1/4 {
    *   width: 25%;
    * }
    * }}}
    */
  def w_1$4: Tailwind = Tailwind()
  /** {{{
    * .w-2/4 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_2$4: Tailwind = Tailwind()
  /** {{{
    * .w-3/4 {
    *   width: 75%;
    * }
    * }}}
    */
  def w_3$4: Tailwind = Tailwind()
  /** {{{
    * .w-1/5 {
    *   width: 20%;
    * }
    * }}}
    */
  def w_1$5: Tailwind = Tailwind()
  /** {{{
    * .w-2/5 {
    *   width: 40%;
    * }
    * }}}
    */
  def w_2$5: Tailwind = Tailwind()
  /** {{{
    * .w-3/5 {
    *   width: 60%;
    * }
    * }}}
    */
  def w_3$5: Tailwind = Tailwind()
  /** {{{
    * .w-4/5 {
    *   width: 80%;
    * }
    * }}}
    */
  def w_4$5: Tailwind = Tailwind()
  /** {{{
    * .w-1/6 {
    *   width: 16.6667%;
    * }
    * }}}
    */
  def w_1$6: Tailwind = Tailwind()
  /** {{{
    * .w-2/6 {
    *   width: 33.3333%;
    * }
    * }}}
    */
  def w_2$6: Tailwind = Tailwind()
  /** {{{
    * .w-3/6 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_3$6: Tailwind = Tailwind()
  /** {{{
    * .w-4/6 {
    *   width: 66.6667%;
    * }
    * }}}
    */
  def w_4$6: Tailwind = Tailwind()
  /** {{{
    * .w-5/6 {
    *   width: 83.3333%;
    * }
    * }}}
    */
  def w_5$6: Tailwind = Tailwind()
  /** {{{
    * .w-1/12 {
    *   width: 8.33333%;
    * }
    * }}}
    */
  def w_1$12: Tailwind = Tailwind()
  /** {{{
    * .w-2/12 {
    *   width: 16.6667%;
    * }
    * }}}
    */
  def w_2$12: Tailwind = Tailwind()
  /** {{{
    * .w-3/12 {
    *   width: 25%;
    * }
    * }}}
    */
  def w_3$12: Tailwind = Tailwind()
  /** {{{
    * .w-4/12 {
    *   width: 33.3333%;
    * }
    * }}}
    */
  def w_4$12: Tailwind = Tailwind()
  /** {{{
    * .w-5/12 {
    *   width: 41.6667%;
    * }
    * }}}
    */
  def w_5$12: Tailwind = Tailwind()
  /** {{{
    * .w-6/12 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_6$12: Tailwind = Tailwind()
  /** {{{
    * .w-7/12 {
    *   width: 58.3333%;
    * }
    * }}}
    */
  def w_7$12: Tailwind = Tailwind()
  /** {{{
    * .w-8/12 {
    *   width: 66.6667%;
    * }
    * }}}
    */
  def w_8$12: Tailwind = Tailwind()
  /** {{{
    * .w-9/12 {
    *   width: 75%;
    * }
    * }}}
    */
  def w_9$12: Tailwind = Tailwind()
  /** {{{
    * .w-10/12 {
    *   width: 83.3333%;
    * }
    * }}}
    */
  def w_10$12: Tailwind = Tailwind()
  /** {{{
    * .w-11/12 {
    *   width: 91.6667%;
    * }
    * }}}
    */
  def w_11$12: Tailwind = Tailwind()
  /** {{{
    * .w-full {
    *   width: 100%;
    * }
    * }}}
    */
  def w_full: Tailwind = Tailwind()
  /** {{{
    * .w-screen {
    *   width: 100vw;
    * }
    * }}}
    */
  def w_screen: Tailwind = Tailwind()
  /** {{{
    * .w-svw {
    *   width: 100svw;
    * }
    * }}}
    */
  def w_svw: Tailwind = Tailwind()
  /** {{{
    * .w-lvw {
    *   width: 100lvw;
    * }
    * }}}
    */
  def w_lvw: Tailwind = Tailwind()
  /** {{{
    * .w-dvw {
    *   width: 100dvw;
    * }
    * }}}
    */
  def w_dvw: Tailwind = Tailwind()
  /** {{{
    * .w-min {
    *   width: min-content;
    * }
    * }}}
    */
  def w_min: Tailwind = Tailwind()
  /** {{{
    * .w-max {
    *   width: max-content;
    * }
    * }}}
    */
  def w_max: Tailwind = Tailwind()
  /** {{{
    * .w-fit {
    *   width: fit-content;
    * }
    * }}}
    */
  def w_fit: Tailwind = Tailwind()
  /** {{{
    * .text-black {
    *   color: #000;
    * }
    * }}}
    */
  def text_black: Tailwind = Tailwind()
  /** {{{
    * .text-white {
    *   color: #fff;
    * }
    * }}}
    */
  def text_white: Tailwind = Tailwind()

  def first_letter(@unused styles: Tailwind): Tailwind = Tailwind()
  def first_line(@unused styles: Tailwind): Tailwind = Tailwind()
  def marker(@unused styles: Tailwind): Tailwind = Tailwind()
  def selection(@unused styles: Tailwind): Tailwind = Tailwind()
  def file(@unused styles: Tailwind): Tailwind = Tailwind()
  def placeholder(@unused styles: Tailwind): Tailwind = Tailwind()
  def backdrop(@unused styles: Tailwind): Tailwind = Tailwind()
  def before(@unused styles: Tailwind): Tailwind = Tailwind()
  def after(@unused styles: Tailwind): Tailwind = Tailwind()
  def first(@unused styles: Tailwind): Tailwind = Tailwind()
  def last(@unused styles: Tailwind): Tailwind = Tailwind()
  def only(@unused styles: Tailwind): Tailwind = Tailwind()
  def odd(@unused styles: Tailwind): Tailwind = Tailwind()
  def even(@unused styles: Tailwind): Tailwind = Tailwind()
  def first_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def last_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def only_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def visited(@unused styles: Tailwind): Tailwind = Tailwind()
  def target(@unused styles: Tailwind): Tailwind = Tailwind()
  def open(@unused styles: Tailwind): Tailwind = Tailwind()
  def default(@unused styles: Tailwind): Tailwind = Tailwind()
  def checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def indeterminate(@unused styles: Tailwind): Tailwind = Tailwind()
  def placeholder_shown(@unused styles: Tailwind): Tailwind = Tailwind()
  def autofill(@unused styles: Tailwind): Tailwind = Tailwind()
  def optional(@unused styles: Tailwind): Tailwind = Tailwind()
  def required(@unused styles: Tailwind): Tailwind = Tailwind()
  def valid(@unused styles: Tailwind): Tailwind = Tailwind()
  def invalid(@unused styles: Tailwind): Tailwind = Tailwind()
  def in_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def out_of_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def read_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def empty(@unused styles: Tailwind): Tailwind = Tailwind()
  def focus_within(@unused styles: Tailwind): Tailwind = Tailwind()
  def hover(@unused styles: Tailwind): Tailwind = Tailwind()
  def focus(@unused styles: Tailwind): Tailwind = Tailwind()
  def focus_visible(@unused styles: Tailwind): Tailwind = Tailwind()
  def active(@unused styles: Tailwind): Tailwind = Tailwind()
  def enabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_first(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_last(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_odd(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_even(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_first_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_last_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_only_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_visited(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_target(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_open(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_default(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_indeterminate(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_placeholder_shown(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_autofill(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_optional(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_valid(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_invalid(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_in_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_out_of_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_read_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_empty(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_focus_within(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_hover(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_focus(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_focus_visible(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_active(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_enabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_first(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_last(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_odd(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_even(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_first_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_last_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_only_of_type(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_visited(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_target(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_open(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_default(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_indeterminate(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_placeholder_shown(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_autofill(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_optional(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_valid(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_invalid(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_in_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_out_of_range(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_read_only(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_empty(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_focus_within(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_hover(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_focus(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_focus_visible(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_active(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_enabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer(@unused styles: Tailwind): Tailwind = Tailwind()
  def has(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_has(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_has(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_busy(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_expanded(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_hidden(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_pressed(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_readonly(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria_selected(@unused styles: Tailwind): Tailwind = Tailwind()
  def aria(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_busy(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_expanded(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_hidden(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_pressed(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_readonly(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria_selected(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_aria(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_busy(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_checked(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_disabled(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_expanded(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_hidden(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_pressed(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_readonly(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_required(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria_selected(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_aria(@unused styles: Tailwind): Tailwind = Tailwind()
  def data(@unused styles: Tailwind): Tailwind = Tailwind()
  def group_data(@unused styles: Tailwind): Tailwind = Tailwind()
  def peer_data(@unused styles: Tailwind): Tailwind = Tailwind()
  def supports(@unused styles: Tailwind): Tailwind = Tailwind()
  def motion_safe(@unused styles: Tailwind): Tailwind = Tailwind()
  def motion_reduce(@unused styles: Tailwind): Tailwind = Tailwind()
  def contrast_more(@unused styles: Tailwind): Tailwind = Tailwind()
  def contrast_less(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_sm(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_md(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_lg(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def max_2xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def max(@unused styles: Tailwind): Tailwind = Tailwind()
  def sm(@unused styles: Tailwind): Tailwind = Tailwind()
  def md(@unused styles: Tailwind): Tailwind = Tailwind()
  def lg(@unused styles: Tailwind): Tailwind = Tailwind()
  def xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def _2xl(@unused styles: Tailwind): Tailwind = Tailwind()
  def min(@unused styles: Tailwind): Tailwind = Tailwind()
  def portrait(@unused styles: Tailwind): Tailwind = Tailwind()
  def landscape(@unused styles: Tailwind): Tailwind = Tailwind()
  def ltr(@unused styles: Tailwind): Tailwind = Tailwind()
  def rtl(@unused styles: Tailwind): Tailwind = Tailwind()
  def dark(@unused styles: Tailwind): Tailwind = Tailwind()
  def forced_colors(@unused styles: Tailwind): Tailwind = Tailwind()
  def print(@unused styles: Tailwind): Tailwind = Tailwind()
  def important(@unused styles: Tailwind): Tailwind = Tailwind()
  def i(@unused styles: Tailwind): Tailwind = Tailwind()
  def raw(@unused classString: String): Tailwind = Tailwind()
  def variant(selector: String, styles: Tailwind): Tailwind = Tailwind()
}

extension (tailwind: Tailwind)
  /** {{{
    * .w-0 {
    *   width: 0;
    * }
    * }}}
    */
  def w_0: Tailwind = Tailwind()
  /** {{{
    * .w-1 {
    *   width: .25rem;
    * }
    * }}}
    */
  def w_1: Tailwind = Tailwind()
  /** {{{
    * .w-2 {
    *   width: .5rem;
    * }
    * }}}
    */
  def w_2: Tailwind = Tailwind()
  /** {{{
    * .w-3 {
    *   width: .75rem;
    * }
    * }}}
    */
  def w_3: Tailwind = Tailwind()
  /** {{{
    * .w-4 {
    *   width: 1rem;
    * }
    * }}}
    */
  def w_4: Tailwind = Tailwind()
  /** {{{
    * .w-5 {
    *   width: 1.25rem;
    * }
    * }}}
    */
  def w_5: Tailwind = Tailwind()
  /** {{{
    * .w-6 {
    *   width: 1.5rem;
    * }
    * }}}
    */
  def w_6: Tailwind = Tailwind()
  /** {{{
    * .w-7 {
    *   width: 1.75rem;
    * }
    * }}}
    */
  def w_7: Tailwind = Tailwind()
  /** {{{
    * .w-8 {
    *   width: 2rem;
    * }
    * }}}
    */
  def w_8: Tailwind = Tailwind()
  /** {{{
    * .w-9 {
    *   width: 2.25rem;
    * }
    * }}}
    */
  def w_9: Tailwind = Tailwind()
  /** {{{
    * .w-10 {
    *   width: 2.5rem;
    * }
    * }}}
    */
  def w_10: Tailwind = Tailwind()
  /** {{{
    * .w-11 {
    *   width: 2.75rem;
    * }
    * }}}
    */
  def w_11: Tailwind = Tailwind()
  /** {{{
    * .w-12 {
    *   width: 3rem;
    * }
    * }}}
    */
  def w_12: Tailwind = Tailwind()
  /** {{{
    * .w-14 {
    *   width: 3.5rem;
    * }
    * }}}
    */
  def w_14: Tailwind = Tailwind()
  /** {{{
    * .w-16 {
    *   width: 4rem;
    * }
    * }}}
    */
  def w_16: Tailwind = Tailwind()
  /** {{{
    * .w-20 {
    *   width: 5rem;
    * }
    * }}}
    */
  def w_20: Tailwind = Tailwind()
  /** {{{
    * .w-24 {
    *   width: 6rem;
    * }
    * }}}
    */
  def w_24: Tailwind = Tailwind()
  /** {{{
    * .w-28 {
    *   width: 7rem;
    * }
    * }}}
    */
  def w_28: Tailwind = Tailwind()
  /** {{{
    * .w-32 {
    *   width: 8rem;
    * }
    * }}}
    */
  def w_32: Tailwind = Tailwind()
  /** {{{
    * .w-36 {
    *   width: 9rem;
    * }
    * }}}
    */
  def w_36: Tailwind = Tailwind()
  /** {{{
    * .w-40 {
    *   width: 10rem;
    * }
    * }}}
    */
  def w_40: Tailwind = Tailwind()
  /** {{{
    * .w-44 {
    *   width: 11rem;
    * }
    * }}}
    */
  def w_44: Tailwind = Tailwind()
  /** {{{
    * .w-48 {
    *   width: 12rem;
    * }
    * }}}
    */
  def w_48: Tailwind = Tailwind()
  /** {{{
    * .w-52 {
    *   width: 13rem;
    * }
    * }}}
    */
  def w_52: Tailwind = Tailwind()
  /** {{{
    * .w-56 {
    *   width: 14rem;
    * }
    * }}}
    */
  def w_56: Tailwind = Tailwind()
  /** {{{
    * .w-60 {
    *   width: 15rem;
    * }
    * }}}
    */
  def w_60: Tailwind = Tailwind()
  /** {{{
    * .w-64 {
    *   width: 16rem;
    * }
    * }}}
    */
  def w_64: Tailwind = Tailwind()
  /** {{{
    * .w-72 {
    *   width: 18rem;
    * }
    * }}}
    */
  def w_72: Tailwind = Tailwind()
  /** {{{
    * .w-80 {
    *   width: 20rem;
    * }
    * }}}
    */
  def w_80: Tailwind = Tailwind()
  /** {{{
    * .w-96 {
    *   width: 24rem;
    * }
    * }}}
    */
  def w_96: Tailwind = Tailwind()
  /** {{{
    * .w-auto {
    *   width: auto;
    * }
    * }}}
    */
  def w_auto: Tailwind = Tailwind()
  /** {{{
    * .w-px {
    *   width: 1px;
    * }
    * }}}
    */
  def w_px: Tailwind = Tailwind()
  /** {{{
    * .w-1/2 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_1$2: Tailwind = Tailwind()
  /** {{{
    * .w-1/3 {
    *   width: 33.3333%;
    * }
    * }}}
    */
  def w_1$3: Tailwind = Tailwind()
  /** {{{
    * .w-2/3 {
    *   width: 66.6667%;
    * }
    * }}}
    */
  def w_2$3: Tailwind = Tailwind()
  /** {{{
    * .w-1/4 {
    *   width: 25%;
    * }
    * }}}
    */
  def w_1$4: Tailwind = Tailwind()
  /** {{{
    * .w-2/4 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_2$4: Tailwind = Tailwind()
  /** {{{
    * .w-3/4 {
    *   width: 75%;
    * }
    * }}}
    */
  def w_3$4: Tailwind = Tailwind()
  /** {{{
    * .w-1/5 {
    *   width: 20%;
    * }
    * }}}
    */
  def w_1$5: Tailwind = Tailwind()
  /** {{{
    * .w-2/5 {
    *   width: 40%;
    * }
    * }}}
    */
  def w_2$5: Tailwind = Tailwind()
  /** {{{
    * .w-3/5 {
    *   width: 60%;
    * }
    * }}}
    */
  def w_3$5: Tailwind = Tailwind()
  /** {{{
    * .w-4/5 {
    *   width: 80%;
    * }
    * }}}
    */
  def w_4$5: Tailwind = Tailwind()
  /** {{{
    * .w-1/6 {
    *   width: 16.6667%;
    * }
    * }}}
    */
  def w_1$6: Tailwind = Tailwind()
  /** {{{
    * .w-2/6 {
    *   width: 33.3333%;
    * }
    * }}}
    */
  def w_2$6: Tailwind = Tailwind()
  /** {{{
    * .w-3/6 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_3$6: Tailwind = Tailwind()
  /** {{{
    * .w-4/6 {
    *   width: 66.6667%;
    * }
    * }}}
    */
  def w_4$6: Tailwind = Tailwind()
  /** {{{
    * .w-5/6 {
    *   width: 83.3333%;
    * }
    * }}}
    */
  def w_5$6: Tailwind = Tailwind()
  /** {{{
    * .w-1/12 {
    *   width: 8.33333%;
    * }
    * }}}
    */
  def w_1$12: Tailwind = Tailwind()
  /** {{{
    * .w-2/12 {
    *   width: 16.6667%;
    * }
    * }}}
    */
  def w_2$12: Tailwind = Tailwind()
  /** {{{
    * .w-3/12 {
    *   width: 25%;
    * }
    * }}}
    */
  def w_3$12: Tailwind = Tailwind()
  /** {{{
    * .w-4/12 {
    *   width: 33.3333%;
    * }
    * }}}
    */
  def w_4$12: Tailwind = Tailwind()
  /** {{{
    * .w-5/12 {
    *   width: 41.6667%;
    * }
    * }}}
    */
  def w_5$12: Tailwind = Tailwind()
  /** {{{
    * .w-6/12 {
    *   width: 50%;
    * }
    * }}}
    */
  def w_6$12: Tailwind = Tailwind()
  /** {{{
    * .w-7/12 {
    *   width: 58.3333%;
    * }
    * }}}
    */
  def w_7$12: Tailwind = Tailwind()
  /** {{{
    * .w-8/12 {
    *   width: 66.6667%;
    * }
    * }}}
    */
  def w_8$12: Tailwind = Tailwind()
  /** {{{
    * .w-9/12 {
    *   width: 75%;
    * }
    * }}}
    */
  def w_9$12: Tailwind = Tailwind()
  /** {{{
    * .w-10/12 {
    *   width: 83.3333%;
    * }
    * }}}
    */
  def w_10$12: Tailwind = Tailwind()
  /** {{{
    * .w-11/12 {
    *   width: 91.6667%;
    * }
    * }}}
    */
  def w_11$12: Tailwind = Tailwind()
  /** {{{
    * .w-full {
    *   width: 100%;
    * }
    * }}}
    */
  def w_full: Tailwind = Tailwind()
  /** {{{
    * .w-screen {
    *   width: 100vw;
    * }
    * }}}
    */
  def w_screen: Tailwind = Tailwind()
  /** {{{
    * .w-svw {
    *   width: 100svw;
    * }
    * }}}
    */
  def w_svw: Tailwind = Tailwind()
  /** {{{
    * .w-lvw {
    *   width: 100lvw;
    * }
    * }}}
    */
  def w_lvw: Tailwind = Tailwind()
  /** {{{
    * .w-dvw {
    *   width: 100dvw;
    * }
    * }}}
    */
  def w_dvw: Tailwind = Tailwind()
  /** {{{
    * .w-min {
    *   width: min-content;
    * }
    * }}}
    */
  def w_min: Tailwind = Tailwind()
  /** {{{
    * .w-max {
    *   width: max-content;
    * }
    * }}}
    */
  def w_max: Tailwind = Tailwind()
  /** {{{
    * .w-fit {
    *   width: fit-content;
    * }
    * }}}
    */
  def w_fit: Tailwind = Tailwind()
  /** {{{
    * .text-black {
    *   color: #000;
    * }
    * }}}
    */
  def text_black: Tailwind = Tailwind()
  /** {{{
    * .text-white {
    *   color: #fff;
    * }
    * }}}
    */
  def text_white: Tailwind = Tailwind()

inline def sw(inline tailwind: Tailwind): String =
  ${ swImpl('tailwind) }

def swImpl(twStyleExpr: Expr[Tailwind])(using Quotes): Expr[String] = {
  import quotes.reflect.*

  def extractClassNames(term: Term): List[String] = term match {
    case Apply(Select(inner, "first_letter"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"first_letter:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "first_line"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"first_line:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "marker"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"marker:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "selection"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"selection:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "file"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"file:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "placeholder"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"placeholder:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "backdrop"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"backdrop:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "before"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"before:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "after"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"after:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "first"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"first:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "last"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"last:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "only"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"only:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "odd"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"odd:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "even"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"even:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "first_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"first_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "last_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"last_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "only_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"only_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "visited"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"visited:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "target"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"target:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "open"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"open:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "default"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"default:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "checked"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"checked:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "indeterminate"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"indeterminate:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "placeholder_shown"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"placeholder_shown:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "autofill"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"autofill:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "optional"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"optional:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "required"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"required:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "valid"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"valid:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "invalid"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"invalid:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "in_range"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"in_range:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "out_of_range"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"out_of_range:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "read_only"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"read_only:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "empty"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"empty:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "focus_within"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"focus_within:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "hover"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"hover:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "focus"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"focus:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "focus_visible"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"focus_visible:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "active"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"active:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "enabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"enabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "disabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"disabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_first"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_first:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_last"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_last:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_only"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_only:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_odd"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_odd:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_even"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_even:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_first_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_first_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_last_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_last_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_only_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_only_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_visited"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_visited:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_target"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_target:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_open"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_open:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_default"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_default:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_checked"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_checked:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_indeterminate"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_indeterminate:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_placeholder_shown"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_placeholder_shown:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_autofill"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_autofill:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_optional"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_optional:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_required"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_required:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_valid"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_valid:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_invalid"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_invalid:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_in_range"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_in_range:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_out_of_range"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_out_of_range:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_read_only"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_read_only:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_empty"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_empty:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_focus_within"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_focus_within:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_hover"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_hover:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_focus"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_focus:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_focus_visible"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_focus_visible:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_active"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_active:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_enabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_enabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_disabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_disabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_first"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_first:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_last"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_last:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_only"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_only:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_odd"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_odd:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_even"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_even:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_first_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_first_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_last_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_last_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_only_of_type"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_only_of_type:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_visited"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_visited:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_target"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_target:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_open"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_open:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_default"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_default:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_checked"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_checked:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_indeterminate"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_indeterminate:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_placeholder_shown"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_placeholder_shown:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_autofill"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_autofill:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_optional"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_optional:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_required"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_required:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_valid"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_valid:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_invalid"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_invalid:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_in_range"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_in_range:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_out_of_range"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_out_of_range:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_read_only"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_read_only:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_empty"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_empty:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_focus_within"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_focus_within:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_hover"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_hover:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_focus"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_focus:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_focus_visible"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_focus_visible:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_active"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_active:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_enabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_enabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_disabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_disabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "has"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"has:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_has"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_has:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_has"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_has:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_busy"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_busy:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_checked"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_checked:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_disabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_disabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_expanded"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_expanded:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_hidden"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_hidden:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_pressed"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_pressed:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_readonly"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_readonly:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_required"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_required:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria_selected"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria_selected:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "aria"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"aria:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_busy"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_busy:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_checked"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_checked:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_disabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_disabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_expanded"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_expanded:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_hidden"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_hidden:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_pressed"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_pressed:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_readonly"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_readonly:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_required"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_required:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria_selected"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria_selected:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_aria"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_aria:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_busy"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_busy:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_checked"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_checked:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_disabled"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_disabled:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_expanded"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_expanded:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_hidden"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_hidden:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_pressed"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_pressed:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_readonly"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_readonly:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_required"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_required:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria_selected"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria_selected:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_aria"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_aria:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "data"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"data:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "group_data"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"group_data:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "peer_data"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"peer_data:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "supports"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"supports:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "motion_safe"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"motion_safe:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "motion_reduce"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"motion_reduce:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "contrast_more"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"contrast_more:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "contrast_less"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"contrast_less:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "max_sm"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"max_sm:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "max_md"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"max_md:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "max_lg"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"max_lg:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "max_xl"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"max_xl:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "max_2xl"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"max_2xl:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "max"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"max:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "sm"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"sm:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "md"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"md:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "lg"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"lg:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "xl"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"xl:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "_2xl"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"_2xl:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "min"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"min:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "portrait"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"portrait:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "landscape"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"landscape:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "ltr"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"ltr:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "rtl"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"rtl:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "dark"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"dark:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "forced_colors"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"forced_colors:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "print"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"print:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "opacity"), List(Literal(IntConstant(value)))) =>
      extractClassNames(inner).init :+ s"${extractClassNames(inner).last}/$value"
    case Apply(Select(inner, "o"), List(Literal(IntConstant(value)))) =>
      extractClassNames(inner).init :+ s"${extractClassNames(inner).last}/$value"
    case Apply(Select(inner, "variant"), List(Literal(StringConstant(selector)), styles)) =>
      val classes = extractClassNames(styles).map(clx => s"[$selector]:$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(Select(Ident("tw"), method), "raw"), List(Literal(StringConstant(classString)))) =>
      val methodClass = method.replace("_", "-")
      val rawClasses = classString.split("\\s+").toList
      methodClass :: rawClasses
    case Apply(Select(Ident("tw"), "raw"), List(Literal(StringConstant(classString)))) =>
      classString.split("\\s+").toList
    case Apply(Select(inner, "important"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"!$clx")
      extractClassNames(inner) ++ classes
    case Apply(Select(inner, "i"), List(styles)) =>
      val classes = extractClassNames(styles).map(clx => s"!$clx")
      extractClassNames(inner) ++ classes
    case Apply(Ident(name), List(inner)) =>
      extractClassNames(inner) :+ name.replace("_", "-").replace("$", "/")
    case Inlined(_, _, inner) =>
      extractClassNames(inner)
    case Select(inner, name) =>
      extractClassNames(inner) :+ name.replace("_", "-").replace("$", "/")
    case Ident("tailwind") =>
      Nil
    case Ident("tw") =>
      Nil
    case _ =>
      report.errorAndAbort(s"Unexpected term: $term")
  }

  val term = twStyleExpr.asTerm
  val classNames = extractClassNames(term)
  val combinedClasses = classNames.mkString(" ")
  Expr(combinedClasses)
}
