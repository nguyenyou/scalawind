package scalawind

import scala.quoted.*
import scala.annotation.unused
import scala.language.implicitConversions
import com.raquo.laminar.api.L

implicit inline def lw(inline tailwind: Tailwind): L.Modifier[L.HtmlElement] = {
  ${ lwImpl('tailwind) }
}

def lwImpl(tailwindExpr: Expr[Tailwind])(using Quotes): Expr[L.Modifier[L.HtmlElement]] = {
  val value = swImpl(tailwindExpr).valueOrAbort
  '{ L.cls := ${ Expr(value) } }
}
import japgolly.scalajs.react.vdom.html_<^.*

implicit inline def cw(inline tailwind: Tailwind): TagMod = {
  ${ cwImpl('tailwind) }
}

def cwImpl(tailwindExpr: Expr[Tailwind])(using Quotes): Expr[TagMod] = {
  val value = swImpl(tailwindExpr).valueOrAbort
  '{ ^.cls := ${ Expr(value) } }
}
extension (inline tailwind: Tailwind) {
  inline def css: String =
    ${ swImpl('tailwind) }
}
    
implicit inline def sw(inline tailwind: Tailwind): String =
  ${ swImpl('tailwind) }

def methodNameToTailwindClass(rawName: String) = {
  val name = if (rawName.startsWith("_") && rawName.charAt(1).isDigit) rawName.stripPrefix("_") else rawName
  name.replace("_", "-").replace("per", "/").replace("dot", ".")
}

def swImpl(tailwindExpr: Expr[Tailwind])(using Quotes): Expr[String] = {
  import quotes.reflect.*
  def validate(classes: List[String]): Unit = {
    checkDuplication(classes)
    val optimizationSuggestions = checkOptimization(classes)
    if (optimizationSuggestions.nonEmpty) report.errorAndAbort(s"[Optimization] ${optimizationSuggestions.mkString(", ")}")
  }
  
  def checkDuplication(classes: List[String]): Unit = {
    val duplicates = classes.groupBy(identity).collect { case (x, List(_, _, _*)) => x }
    if (duplicates.nonEmpty) report.errorAndAbort(s"[Duplication] ${duplicates.mkString(", ")}")
  }
  
  def checkOptimization(classes: List[String]): List[String] = {
    val properties = List("p", "m")
  
    val suggestions = properties.flatMap { property =>
      val propertySuggestions = scala.collection.mutable.ListBuffer.empty[String]
  
      val classMap = classes.map {
        case c if c.startsWith(s"${property}t-") => s"${property}t" -> c
        case c if c.startsWith(s"${property}b-") => s"${property}b" -> c
        case c if c.startsWith(s"${property}l-") => s"${property}l" -> c
        case c if c.startsWith(s"${property}r-") => s"${property}r" -> c
        case c if c.startsWith(s"${property}x-") => s"${property}x" -> c
        case c if c.startsWith(s"${property}y-") => s"${property}y" -> c
        case c if c.startsWith(s"${property}-")  => property        -> c
        case c => c -> c
      }.groupBy(_._1).view.mapValues(_.map(_._2)).toMap
  
      def checkAndSuggest(key1: String, key2: String, combined: String): Unit = {
        (classMap.get(key1), classMap.get(key2)) match {
          case (Some(List(c1)), Some(List(c2))) if c1.substring(3) == c2.substring(3) =>
            propertySuggestions += s"Use $combined${c1.substring(3)} instead of $c1 and $c2"
          case _ => ()
        }
      }
  
      def checkFourWay(): Unit = {
        (classMap.get(s"${property}t"), classMap.get(s"${property}b"), classMap.get(s"${property}l"), classMap.get(s"${property}r")) match {
          case (Some(List(pt)), Some(List(pb)), Some(List(pl)), Some(List(pr))) if pt.substring(3) == pb.substring(3) && pl.substring(3) == pr.substring(3) && pt.substring(3) == pl.substring(3) =>
            propertySuggestions += s"Use ${property}-${pt.substring(3)} instead of $pt, $pb, $pl and $pr"
          case _ => ()
        }
      }
  
      def checkPxPy(): Unit = {
        (classMap.get(s"${property}x"), classMap.get(s"${property}y")) match {
          case (Some(List(px)), Some(List(py))) if px.substring(3) == py.substring(3) =>
            propertySuggestions += s"Use ${property}-${px.substring(3)} instead of $px and $py"
          case _ => ()
        }
      }
  
      // Check for four-way combination first
      checkFourWay()
  
      // Only check for two-way combinations if no four-way combination is found
      if (propertySuggestions.isEmpty) {
        checkPxPy()
        if (propertySuggestions.isEmpty) {
          checkAndSuggest(s"${property}t", s"${property}b", s"${property}y-")
          checkAndSuggest(s"${property}l", s"${property}r", s"${property}x-")
        }
      }
  
      propertySuggestions.toList
    }
  
    suggestions
  }
  
  def extractClassNames(term: Term, prefix: String = "", important: Boolean = false): List[String] = {
    var stack = List((term, prefix, important))
    var classNames = List.empty[String]

    while (stack.nonEmpty) {
      val (currentTerm, currentPrefix, currentImportant) = stack.head
      stack = stack.tail

      currentTerm match {
        case Apply(Select(inner, "important"), List(styles)) =>
          stack = (styles, currentPrefix, true) :: stack
          stack = (inner, currentPrefix, currentImportant) :: stack
        case Inlined(_, _, inner) =>
          stack = (inner, currentPrefix, currentImportant) :: stack
        case Select(inner, name) =>
          val methodName = methodNameToTailwindClass(name)
          val className = s"$currentPrefix${if (currentImportant) "!" else ""}${methodName}"
          classNames = classNames :+ className
          stack = (inner, currentPrefix, currentImportant) :: stack
        case Ident("tw") =>
        // No action needed, just continue processing the remaining stack
        case Apply(Ident(name), List(arg)) =>
          val methodName = methodNameToTailwindClass(name)
          val className = s"$currentPrefix${if (currentImportant) "!" else ""}${methodName}"
          classNames = classNames :+ className
          stack = (arg, currentPrefix, currentImportant) :: stack
        case Apply(Select(inner, name), List(Literal(StringConstant(value)))) if name == "raw" =>
          val className = s"$currentPrefix${if (currentImportant) "!" else ""}$value"
          classNames = classNames :+ className
          stack = (inner, currentPrefix, currentImportant) :: stack
        case Apply(Select(inner, name), List(Literal(StringConstant(opacity)))) if name.endsWith("$") =>
          val methodName = methodNameToTailwindClass(name.stripSuffix("$"))
          val className = s"$currentPrefix${if (currentImportant) "!" else ""}${methodName}/${opacity}"
          classNames = classNames :+ className
          stack = (inner, currentPrefix, currentImportant) :: stack
        case Apply(Select(inner, name), List(Literal(StringConstant(value)))) =>
          val methodName = methodNameToTailwindClass(name)
          val className = s"$currentPrefix${if (currentImportant) "!" else ""}${methodName}[$value]"
          classNames = classNames :+ className
          stack = (inner, currentPrefix, currentImportant) :: stack
        case Apply(Apply(Ident(name), args), List(Literal(StringConstant(value)))) =>
          val methodName = methodNameToTailwindClass(name)
          val className = s"$currentPrefix${if (currentImportant) "!" else ""}${methodName}[$value]"
          classNames = classNames :+ className
          stack = args.map(arg => (arg, currentPrefix, currentImportant)) ++ stack
        case Apply(Select(Ident("tw"), name), List(inner)) =>
          val methodName = methodNameToTailwindClass(name)
          stack = (inner, s"$currentPrefix${methodName}:", currentImportant) :: stack
        case Apply(Select(inner, "variant"), List(Literal(StringConstant(selector)), styles)) =>
          val variantPrefix = s"$currentPrefix[$selector]:" // Use the selector as provided
          val styleClasses = extractClassNames(styles, variantPrefix, currentImportant) // Extract classes with the variant prefix
          classNames = classNames ++ styleClasses
          stack = (inner, currentPrefix, currentImportant) :: stack
        case Apply(Select(inner, name), args) =>
          val methodName = methodNameToTailwindClass(name)
          val innerClasses = args.flatMap(arg => extractClassNames(arg, s"$currentPrefix${methodName}:"))
          classNames = classNames ++ innerClasses
          stack = (inner, currentPrefix, currentImportant) :: stack
        case unexpectedTerm =>
          report.errorAndAbort(s"Unexpected term: $unexpectedTerm")
      }
    }
    
    classNames
  }

  val term = tailwindExpr.asTerm
  val classList = extractClassNames(term).reverse
  validate(classList)
  val combinedClasses = classList.mkString(" ")
  report.info(s"$combinedClasses")
  Expr(combinedClasses)
}
val tw = Tailwind()

case class Tailwind() {
  def first_letter(@unused styles: Tailwind): Tailwind = this
  def first_line(@unused styles: Tailwind): Tailwind = this
  def marker(@unused styles: Tailwind): Tailwind = this
  def selection(@unused styles: Tailwind): Tailwind = this
  def file(@unused styles: Tailwind): Tailwind = this
  def placeholder(@unused styles: Tailwind): Tailwind = this
  def backdrop(@unused styles: Tailwind): Tailwind = this
  def before(@unused styles: Tailwind): Tailwind = this
  def after(@unused styles: Tailwind): Tailwind = this
  def first(@unused styles: Tailwind): Tailwind = this
  def last(@unused styles: Tailwind): Tailwind = this
  def only(@unused styles: Tailwind): Tailwind = this
  def odd(@unused styles: Tailwind): Tailwind = this
  def even(@unused styles: Tailwind): Tailwind = this
  def first_of_type(@unused styles: Tailwind): Tailwind = this
  def last_of_type(@unused styles: Tailwind): Tailwind = this
  def only_of_type(@unused styles: Tailwind): Tailwind = this
  def visited(@unused styles: Tailwind): Tailwind = this
  def target(@unused styles: Tailwind): Tailwind = this
  def open(@unused styles: Tailwind): Tailwind = this
  def default(@unused styles: Tailwind): Tailwind = this
  def checked(@unused styles: Tailwind): Tailwind = this
  def indeterminate(@unused styles: Tailwind): Tailwind = this
  def placeholder_shown(@unused styles: Tailwind): Tailwind = this
  def autofill(@unused styles: Tailwind): Tailwind = this
  def optional(@unused styles: Tailwind): Tailwind = this
  def required(@unused styles: Tailwind): Tailwind = this
  def valid(@unused styles: Tailwind): Tailwind = this
  def invalid(@unused styles: Tailwind): Tailwind = this
  def in_range(@unused styles: Tailwind): Tailwind = this
  def out_of_range(@unused styles: Tailwind): Tailwind = this
  def read_only(@unused styles: Tailwind): Tailwind = this
  def empty(@unused styles: Tailwind): Tailwind = this
  def focus_within(@unused styles: Tailwind): Tailwind = this
  def hover(@unused styles: Tailwind): Tailwind = this
  def focus(@unused styles: Tailwind): Tailwind = this
  def focus_visible(@unused styles: Tailwind): Tailwind = this
  def active(@unused styles: Tailwind): Tailwind = this
  def enabled(@unused styles: Tailwind): Tailwind = this
  def disabled(@unused styles: Tailwind): Tailwind = this
  def group_first(@unused styles: Tailwind): Tailwind = this
  def group_last(@unused styles: Tailwind): Tailwind = this
  def group_only(@unused styles: Tailwind): Tailwind = this
  def group_odd(@unused styles: Tailwind): Tailwind = this
  def group_even(@unused styles: Tailwind): Tailwind = this
  def group_first_of_type(@unused styles: Tailwind): Tailwind = this
  def group_last_of_type(@unused styles: Tailwind): Tailwind = this
  def group_only_of_type(@unused styles: Tailwind): Tailwind = this
  def group_visited(@unused styles: Tailwind): Tailwind = this
  def group_target(@unused styles: Tailwind): Tailwind = this
  def group_open(@unused styles: Tailwind): Tailwind = this
  def group_default(@unused styles: Tailwind): Tailwind = this
  def group_checked(@unused styles: Tailwind): Tailwind = this
  def group_indeterminate(@unused styles: Tailwind): Tailwind = this
  def group_placeholder_shown(@unused styles: Tailwind): Tailwind = this
  def group_autofill(@unused styles: Tailwind): Tailwind = this
  def group_optional(@unused styles: Tailwind): Tailwind = this
  def group_required(@unused styles: Tailwind): Tailwind = this
  def group_valid(@unused styles: Tailwind): Tailwind = this
  def group_invalid(@unused styles: Tailwind): Tailwind = this
  def group_in_range(@unused styles: Tailwind): Tailwind = this
  def group_out_of_range(@unused styles: Tailwind): Tailwind = this
  def group_read_only(@unused styles: Tailwind): Tailwind = this
  def group_empty(@unused styles: Tailwind): Tailwind = this
  def group_focus_within(@unused styles: Tailwind): Tailwind = this
  def group_hover(@unused styles: Tailwind): Tailwind = this
  def group_focus(@unused styles: Tailwind): Tailwind = this
  def group_focus_visible(@unused styles: Tailwind): Tailwind = this
  def group_active(@unused styles: Tailwind): Tailwind = this
  def group_enabled(@unused styles: Tailwind): Tailwind = this
  def group_disabled(@unused styles: Tailwind): Tailwind = this
  def group(@unused styles: Tailwind): Tailwind = this
  def peer_first(@unused styles: Tailwind): Tailwind = this
  def peer_last(@unused styles: Tailwind): Tailwind = this
  def peer_only(@unused styles: Tailwind): Tailwind = this
  def peer_odd(@unused styles: Tailwind): Tailwind = this
  def peer_even(@unused styles: Tailwind): Tailwind = this
  def peer_first_of_type(@unused styles: Tailwind): Tailwind = this
  def peer_last_of_type(@unused styles: Tailwind): Tailwind = this
  def peer_only_of_type(@unused styles: Tailwind): Tailwind = this
  def peer_visited(@unused styles: Tailwind): Tailwind = this
  def peer_target(@unused styles: Tailwind): Tailwind = this
  def peer_open(@unused styles: Tailwind): Tailwind = this
  def peer_default(@unused styles: Tailwind): Tailwind = this
  def peer_checked(@unused styles: Tailwind): Tailwind = this
  def peer_indeterminate(@unused styles: Tailwind): Tailwind = this
  def peer_placeholder_shown(@unused styles: Tailwind): Tailwind = this
  def peer_autofill(@unused styles: Tailwind): Tailwind = this
  def peer_optional(@unused styles: Tailwind): Tailwind = this
  def peer_required(@unused styles: Tailwind): Tailwind = this
  def peer_valid(@unused styles: Tailwind): Tailwind = this
  def peer_invalid(@unused styles: Tailwind): Tailwind = this
  def peer_in_range(@unused styles: Tailwind): Tailwind = this
  def peer_out_of_range(@unused styles: Tailwind): Tailwind = this
  def peer_read_only(@unused styles: Tailwind): Tailwind = this
  def peer_empty(@unused styles: Tailwind): Tailwind = this
  def peer_focus_within(@unused styles: Tailwind): Tailwind = this
  def peer_hover(@unused styles: Tailwind): Tailwind = this
  def peer_focus(@unused styles: Tailwind): Tailwind = this
  def peer_focus_visible(@unused styles: Tailwind): Tailwind = this
  def peer_active(@unused styles: Tailwind): Tailwind = this
  def peer_enabled(@unused styles: Tailwind): Tailwind = this
  def peer_disabled(@unused styles: Tailwind): Tailwind = this
  def peer(@unused styles: Tailwind): Tailwind = this
  def has(@unused styles: Tailwind): Tailwind = this
  def group_has(@unused styles: Tailwind): Tailwind = this
  def peer_has(@unused styles: Tailwind): Tailwind = this
  def aria_busy(@unused styles: Tailwind): Tailwind = this
  def aria_checked(@unused styles: Tailwind): Tailwind = this
  def aria_disabled(@unused styles: Tailwind): Tailwind = this
  def aria_expanded(@unused styles: Tailwind): Tailwind = this
  def aria_hidden(@unused styles: Tailwind): Tailwind = this
  def aria_pressed(@unused styles: Tailwind): Tailwind = this
  def aria_readonly(@unused styles: Tailwind): Tailwind = this
  def aria_required(@unused styles: Tailwind): Tailwind = this
  def aria_selected(@unused styles: Tailwind): Tailwind = this
  def aria(@unused styles: Tailwind): Tailwind = this
  def group_aria_busy(@unused styles: Tailwind): Tailwind = this
  def group_aria_checked(@unused styles: Tailwind): Tailwind = this
  def group_aria_disabled(@unused styles: Tailwind): Tailwind = this
  def group_aria_expanded(@unused styles: Tailwind): Tailwind = this
  def group_aria_hidden(@unused styles: Tailwind): Tailwind = this
  def group_aria_pressed(@unused styles: Tailwind): Tailwind = this
  def group_aria_readonly(@unused styles: Tailwind): Tailwind = this
  def group_aria_required(@unused styles: Tailwind): Tailwind = this
  def group_aria_selected(@unused styles: Tailwind): Tailwind = this
  def group_aria(@unused styles: Tailwind): Tailwind = this
  def peer_aria_busy(@unused styles: Tailwind): Tailwind = this
  def peer_aria_checked(@unused styles: Tailwind): Tailwind = this
  def peer_aria_disabled(@unused styles: Tailwind): Tailwind = this
  def peer_aria_expanded(@unused styles: Tailwind): Tailwind = this
  def peer_aria_hidden(@unused styles: Tailwind): Tailwind = this
  def peer_aria_pressed(@unused styles: Tailwind): Tailwind = this
  def peer_aria_readonly(@unused styles: Tailwind): Tailwind = this
  def peer_aria_required(@unused styles: Tailwind): Tailwind = this
  def peer_aria_selected(@unused styles: Tailwind): Tailwind = this
  def peer_aria(@unused styles: Tailwind): Tailwind = this
  def data(@unused styles: Tailwind): Tailwind = this
  def group_data(@unused styles: Tailwind): Tailwind = this
  def peer_data(@unused styles: Tailwind): Tailwind = this
  def supports(@unused styles: Tailwind): Tailwind = this
  def motion_safe(@unused styles: Tailwind): Tailwind = this
  def motion_reduce(@unused styles: Tailwind): Tailwind = this
  def contrast_more(@unused styles: Tailwind): Tailwind = this
  def contrast_less(@unused styles: Tailwind): Tailwind = this
  def max_sm(@unused styles: Tailwind): Tailwind = this
  def max_md(@unused styles: Tailwind): Tailwind = this
  def max_lg(@unused styles: Tailwind): Tailwind = this
  def max_xl(@unused styles: Tailwind): Tailwind = this
  def max_2xl(@unused styles: Tailwind): Tailwind = this
  def max(@unused styles: Tailwind): Tailwind = this
  def sm(@unused styles: Tailwind): Tailwind = this
  def md(@unused styles: Tailwind): Tailwind = this
  def lg(@unused styles: Tailwind): Tailwind = this
  def xl(@unused styles: Tailwind): Tailwind = this
  def _2xl(@unused styles: Tailwind): Tailwind = this
  def min(@unused styles: Tailwind): Tailwind = this
  def portrait(@unused styles: Tailwind): Tailwind = this
  def landscape(@unused styles: Tailwind): Tailwind = this
  def ltr(@unused styles: Tailwind): Tailwind = this
  def rtl(@unused styles: Tailwind): Tailwind = this
  def dark(@unused styles: Tailwind): Tailwind = this
  def forced_colors(@unused styles: Tailwind): Tailwind = this
  def print(@unused styles: Tailwind): Tailwind = this
  def text_black$(@unused value: String): Tailwind = this
  def text_red_50$(@unused value: String): Tailwind = this
  def text_red_100$(@unused value: String): Tailwind = this
  def text_red_200$(@unused value: String): Tailwind = this
  def text_red_300$(@unused value: String): Tailwind = this
  def text_red_400$(@unused value: String): Tailwind = this
  def text_red_500$(@unused value: String): Tailwind = this
  def text_red_600$(@unused value: String): Tailwind = this
  def text_red_700$(@unused value: String): Tailwind = this
  def text_red_800$(@unused value: String): Tailwind = this
  def text_red_900$(@unused value: String): Tailwind = this
  def text_red_950$(@unused value: String): Tailwind = this
  def container: Tailwind = this
  def w_0: Tailwind = this
  def w_1: Tailwind = this
  def w_2: Tailwind = this
  def w_3: Tailwind = this
  def w_4: Tailwind = this
  def w_5: Tailwind = this
  def w_6: Tailwind = this
  def w_7: Tailwind = this
  def w_8: Tailwind = this
  def w_9: Tailwind = this
  def w_10: Tailwind = this
  def w_11: Tailwind = this
  def w_12: Tailwind = this
  def w_14: Tailwind = this
  def w_16: Tailwind = this
  def w_20: Tailwind = this
  def w_24: Tailwind = this
  def w_28: Tailwind = this
  def w_32: Tailwind = this
  def w_36: Tailwind = this
  def w_40: Tailwind = this
  def w_44: Tailwind = this
  def w_48: Tailwind = this
  def w_52: Tailwind = this
  def w_56: Tailwind = this
  def w_60: Tailwind = this
  def w_64: Tailwind = this
  def w_72: Tailwind = this
  def w_80: Tailwind = this
  def w_96: Tailwind = this
  def w_auto: Tailwind = this
  def w_px: Tailwind = this
  def `w_0.5`: Tailwind = this
  def `w_1.5`: Tailwind = this
  def `w_2.5`: Tailwind = this
  def `w_3.5`: Tailwind = this
  def `w_1/2`: Tailwind = this
  def `w_1/3`: Tailwind = this
  def `w_2/3`: Tailwind = this
  def `w_1/4`: Tailwind = this
  def `w_2/4`: Tailwind = this
  def `w_3/4`: Tailwind = this
  def `w_1/5`: Tailwind = this
  def `w_2/5`: Tailwind = this
  def `w_3/5`: Tailwind = this
  def `w_4/5`: Tailwind = this
  def `w_1/6`: Tailwind = this
  def `w_2/6`: Tailwind = this
  def `w_3/6`: Tailwind = this
  def `w_4/6`: Tailwind = this
  def `w_5/6`: Tailwind = this
  def `w_1/12`: Tailwind = this
  def `w_2/12`: Tailwind = this
  def `w_3/12`: Tailwind = this
  def `w_4/12`: Tailwind = this
  def `w_5/12`: Tailwind = this
  def `w_6/12`: Tailwind = this
  def `w_7/12`: Tailwind = this
  def `w_8/12`: Tailwind = this
  def `w_9/12`: Tailwind = this
  def `w_10/12`: Tailwind = this
  def `w_11/12`: Tailwind = this
  def w_full: Tailwind = this
  def w_screen: Tailwind = this
  def w_svw: Tailwind = this
  def w_lvw: Tailwind = this
  def w_dvw: Tailwind = this
  def w_min: Tailwind = this
  def w_max: Tailwind = this
  def w_fit: Tailwind = this
  def animate_none: Tailwind = this
  def animate_spin: Tailwind = this
  def animate_ping: Tailwind = this
  def animate_pulse: Tailwind = this
  def animate_bounce: Tailwind = this
  def text_black: Tailwind = this
  def text_red_50: Tailwind = this
  def text_red_100: Tailwind = this
  def text_red_200: Tailwind = this
  def text_red_300: Tailwind = this
  def text_red_400: Tailwind = this
  def text_red_500: Tailwind = this
  def text_red_600: Tailwind = this
  def text_red_700: Tailwind = this
  def text_red_800: Tailwind = this
  def text_red_900: Tailwind = this
  def text_red_950: Tailwind = this
  def container_(value: String): Tailwind = this
  def w_(value: String): Tailwind = this
  def animate_(value: String): Tailwind = this
  def text_(value: String): Tailwind = this
  def important(@unused styles: Tailwind): Tailwind = this
  def raw(@unused classString: String): Tailwind = this
  def variant(selector: String, styles: Tailwind): Tailwind = this
}